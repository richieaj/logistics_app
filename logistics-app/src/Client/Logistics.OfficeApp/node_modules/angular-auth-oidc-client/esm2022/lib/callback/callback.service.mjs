import { Injectable, inject } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { tap } from 'rxjs/operators';
import { FlowHelper } from '../utils/flowHelper/flow-helper.service';
import { UrlService } from '../utils/url/url.service';
import { CodeFlowCallbackService } from './code-flow-callback.service';
import { ImplicitFlowCallbackService } from './implicit-flow-callback.service';
import * as i0 from "@angular/core";
export class CallbackService {
    constructor() {
        this.urlService = inject(UrlService);
        this.flowHelper = inject(FlowHelper);
        this.implicitFlowCallbackService = inject(ImplicitFlowCallbackService);
        this.codeFlowCallbackService = inject(CodeFlowCallbackService);
        this.stsCallbackInternal$ = new Subject();
    }
    get stsCallback$() {
        return this.stsCallbackInternal$.asObservable();
    }
    isCallback(currentUrl) {
        if (!currentUrl) {
            return false;
        }
        return this.urlService.isCallbackFromSts(currentUrl);
    }
    handleCallbackAndFireEvents(currentCallbackUrl, config, allConfigs) {
        let callback$ = new Observable();
        if (this.flowHelper.isCurrentFlowCodeFlow(config)) {
            callback$ = this.codeFlowCallbackService.authenticatedCallbackWithCode(currentCallbackUrl, config, allConfigs);
        }
        else if (this.flowHelper.isCurrentFlowAnyImplicitFlow(config)) {
            if (currentCallbackUrl?.includes('#')) {
                const hash = currentCallbackUrl.substring(currentCallbackUrl.indexOf('#') + 1);
                callback$ =
                    this.implicitFlowCallbackService.authenticatedImplicitFlowCallback(config, allConfigs, hash);
            }
            else {
                callback$ =
                    this.implicitFlowCallbackService.authenticatedImplicitFlowCallback(config, allConfigs);
            }
        }
        return callback$.pipe(tap(() => this.stsCallbackInternal$.next()));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: CallbackService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: CallbackService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: CallbackService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsbGJhY2suc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYXV0aC1vaWRjLWNsaWVudC9zcmMvbGliL2NhbGxiYWNrL2NhbGxiYWNrLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR3JDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNyRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDdEQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDdkUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7O0FBRy9FLE1BQU0sT0FBTyxlQUFlO0lBRDVCO1FBRW1CLGVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFaEMsZUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVoQyxnQ0FBMkIsR0FBRyxNQUFNLENBQ25ELDJCQUEyQixDQUM1QixDQUFDO1FBRWUsNEJBQXVCLEdBQUcsTUFBTSxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFFMUQseUJBQW9CLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztLQWtEN0Q7SUFoREMsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDbEQsQ0FBQztJQUVELFVBQVUsQ0FBQyxVQUFrQjtRQUMzQixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDaEIsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDO1FBRUQsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCwyQkFBMkIsQ0FDekIsa0JBQTBCLEVBQzFCLE1BQTJCLEVBQzNCLFVBQWlDO1FBRWpDLElBQUksU0FBUyxHQUFnQyxJQUFJLFVBQVUsRUFBRSxDQUFDO1FBRTlELElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1lBQ2xELFNBQVMsR0FBRyxJQUFJLENBQUMsdUJBQXVCLENBQUMsNkJBQTZCLENBQ3BFLGtCQUFrQixFQUNsQixNQUFNLEVBQ04sVUFBVSxDQUNYLENBQUM7UUFDSixDQUFDO2FBQU0sSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLDRCQUE0QixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7WUFDaEUsSUFBSSxrQkFBa0IsRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztnQkFDdEMsTUFBTSxJQUFJLEdBQUcsa0JBQWtCLENBQUMsU0FBUyxDQUN2QyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUNwQyxDQUFDO2dCQUVGLFNBQVM7b0JBQ1AsSUFBSSxDQUFDLDJCQUEyQixDQUFDLGlDQUFpQyxDQUNoRSxNQUFNLEVBQ04sVUFBVSxFQUNWLElBQUksQ0FDTCxDQUFDO1lBQ04sQ0FBQztpQkFBTSxDQUFDO2dCQUNOLFNBQVM7b0JBQ1AsSUFBSSxDQUFDLDJCQUEyQixDQUFDLGlDQUFpQyxDQUNoRSxNQUFNLEVBQ04sVUFBVSxDQUNYLENBQUM7WUFDTixDQUFDO1FBQ0gsQ0FBQztRQUVELE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNyRSxDQUFDOzhHQTVEVSxlQUFlO2tIQUFmLGVBQWUsY0FERixNQUFNOzsyRkFDbkIsZUFBZTtrQkFEM0IsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBpbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE9wZW5JZENvbmZpZ3VyYXRpb24gfSBmcm9tICcuLi9jb25maWcvb3BlbmlkLWNvbmZpZ3VyYXRpb24nO1xuaW1wb3J0IHsgQ2FsbGJhY2tDb250ZXh0IH0gZnJvbSAnLi4vZmxvd3MvY2FsbGJhY2stY29udGV4dCc7XG5pbXBvcnQgeyBGbG93SGVscGVyIH0gZnJvbSAnLi4vdXRpbHMvZmxvd0hlbHBlci9mbG93LWhlbHBlci5zZXJ2aWNlJztcbmltcG9ydCB7IFVybFNlcnZpY2UgfSBmcm9tICcuLi91dGlscy91cmwvdXJsLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29kZUZsb3dDYWxsYmFja1NlcnZpY2UgfSBmcm9tICcuL2NvZGUtZmxvdy1jYWxsYmFjay5zZXJ2aWNlJztcbmltcG9ydCB7IEltcGxpY2l0Rmxvd0NhbGxiYWNrU2VydmljZSB9IGZyb20gJy4vaW1wbGljaXQtZmxvdy1jYWxsYmFjay5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBDYWxsYmFja1NlcnZpY2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IHVybFNlcnZpY2UgPSBpbmplY3QoVXJsU2VydmljZSk7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBmbG93SGVscGVyID0gaW5qZWN0KEZsb3dIZWxwZXIpO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgaW1wbGljaXRGbG93Q2FsbGJhY2tTZXJ2aWNlID0gaW5qZWN0KFxuICAgIEltcGxpY2l0Rmxvd0NhbGxiYWNrU2VydmljZVxuICApO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgY29kZUZsb3dDYWxsYmFja1NlcnZpY2UgPSBpbmplY3QoQ29kZUZsb3dDYWxsYmFja1NlcnZpY2UpO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgc3RzQ2FsbGJhY2tJbnRlcm5hbCQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIGdldCBzdHNDYWxsYmFjayQoKTogT2JzZXJ2YWJsZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuc3RzQ2FsbGJhY2tJbnRlcm5hbCQuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBpc0NhbGxiYWNrKGN1cnJlbnRVcmw6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGlmICghY3VycmVudFVybCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnVybFNlcnZpY2UuaXNDYWxsYmFja0Zyb21TdHMoY3VycmVudFVybCk7XG4gIH1cblxuICBoYW5kbGVDYWxsYmFja0FuZEZpcmVFdmVudHMoXG4gICAgY3VycmVudENhbGxiYWNrVXJsOiBzdHJpbmcsXG4gICAgY29uZmlnOiBPcGVuSWRDb25maWd1cmF0aW9uLFxuICAgIGFsbENvbmZpZ3M6IE9wZW5JZENvbmZpZ3VyYXRpb25bXVxuICApOiBPYnNlcnZhYmxlPENhbGxiYWNrQ29udGV4dD4ge1xuICAgIGxldCBjYWxsYmFjayQ6IE9ic2VydmFibGU8Q2FsbGJhY2tDb250ZXh0PiA9IG5ldyBPYnNlcnZhYmxlKCk7XG5cbiAgICBpZiAodGhpcy5mbG93SGVscGVyLmlzQ3VycmVudEZsb3dDb2RlRmxvdyhjb25maWcpKSB7XG4gICAgICBjYWxsYmFjayQgPSB0aGlzLmNvZGVGbG93Q2FsbGJhY2tTZXJ2aWNlLmF1dGhlbnRpY2F0ZWRDYWxsYmFja1dpdGhDb2RlKFxuICAgICAgICBjdXJyZW50Q2FsbGJhY2tVcmwsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgYWxsQ29uZmlnc1xuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZmxvd0hlbHBlci5pc0N1cnJlbnRGbG93QW55SW1wbGljaXRGbG93KGNvbmZpZykpIHtcbiAgICAgIGlmIChjdXJyZW50Q2FsbGJhY2tVcmw/LmluY2x1ZGVzKCcjJykpIHtcbiAgICAgICAgY29uc3QgaGFzaCA9IGN1cnJlbnRDYWxsYmFja1VybC5zdWJzdHJpbmcoXG4gICAgICAgICAgY3VycmVudENhbGxiYWNrVXJsLmluZGV4T2YoJyMnKSArIDFcbiAgICAgICAgKTtcblxuICAgICAgICBjYWxsYmFjayQgPVxuICAgICAgICAgIHRoaXMuaW1wbGljaXRGbG93Q2FsbGJhY2tTZXJ2aWNlLmF1dGhlbnRpY2F0ZWRJbXBsaWNpdEZsb3dDYWxsYmFjayhcbiAgICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICAgIGFsbENvbmZpZ3MsXG4gICAgICAgICAgICBoYXNoXG4gICAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrJCA9XG4gICAgICAgICAgdGhpcy5pbXBsaWNpdEZsb3dDYWxsYmFja1NlcnZpY2UuYXV0aGVudGljYXRlZEltcGxpY2l0Rmxvd0NhbGxiYWNrKFxuICAgICAgICAgICAgY29uZmlnLFxuICAgICAgICAgICAgYWxsQ29uZmlnc1xuICAgICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGxiYWNrJC5waXBlKHRhcCgoKSA9PiB0aGlzLnN0c0NhbGxiYWNrSW50ZXJuYWwkLm5leHQoKSkpO1xuICB9XG59XG4iXX0=