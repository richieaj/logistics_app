import { Injectable, inject } from '@angular/core';
import { LoggerService } from '../../logging/logger.service';
import { allMultipleConfigRules, allRules } from './rules';
import * as i0 from "@angular/core";
export class ConfigValidationService {
    constructor() {
        this.loggerService = inject(LoggerService);
    }
    validateConfigs(passedConfigs) {
        return this.validateConfigsInternal(passedConfigs ?? [], allMultipleConfigRules);
    }
    validateConfig(passedConfig) {
        return this.validateConfigInternal(passedConfig, allRules);
    }
    validateConfigsInternal(passedConfigs, allRulesToUse) {
        if (passedConfigs.length === 0) {
            return false;
        }
        const allValidationResults = allRulesToUse.map((rule) => rule(passedConfigs));
        let overallErrorCount = 0;
        passedConfigs.forEach((passedConfig) => {
            const errorCount = this.processValidationResultsAndGetErrorCount(allValidationResults, passedConfig);
            overallErrorCount += errorCount;
        });
        return overallErrorCount === 0;
    }
    validateConfigInternal(passedConfig, allRulesToUse) {
        const allValidationResults = allRulesToUse.map((rule) => rule(passedConfig));
        const errorCount = this.processValidationResultsAndGetErrorCount(allValidationResults, passedConfig);
        return errorCount === 0;
    }
    processValidationResultsAndGetErrorCount(allValidationResults, config) {
        const allMessages = allValidationResults.filter((x) => x.messages.length > 0);
        const allErrorMessages = this.getAllMessagesOfType('error', allMessages);
        const allWarnings = this.getAllMessagesOfType('warning', allMessages);
        allErrorMessages.forEach((message) => this.loggerService.logError(config, message));
        allWarnings.forEach((message) => this.loggerService.logWarning(config, message));
        return allErrorMessages.length;
    }
    getAllMessagesOfType(type, results) {
        const allMessages = results
            .filter((x) => x.level === type)
            .map((result) => result.messages);
        return allMessages.reduce((acc, val) => acc.concat(val), []);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: ConfigValidationService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: ConfigValidationService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: ConfigValidationService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLXZhbGlkYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYXV0aC1vaWRjLWNsaWVudC9zcmMvbGliL2NvbmZpZy92YWxpZGF0aW9uL2NvbmZpZy12YWxpZGF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRzdELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxRQUFRLEVBQUUsTUFBTSxTQUFTLENBQUM7O0FBRzNELE1BQU0sT0FBTyx1QkFBdUI7SUFEcEM7UUFFbUIsa0JBQWEsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7S0FxRnhEO0lBbkZDLGVBQWUsQ0FBQyxhQUFvQztRQUNsRCxPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FDakMsYUFBYSxJQUFJLEVBQUUsRUFDbkIsc0JBQXNCLENBQ3ZCLENBQUM7SUFDSixDQUFDO0lBRUQsY0FBYyxDQUFDLFlBQWlDO1FBQzlDLE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRU8sdUJBQXVCLENBQzdCLGFBQW9DLEVBQ3BDLGFBQWdGO1FBRWhGLElBQUksYUFBYSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUMvQixPQUFPLEtBQUssQ0FBQztRQUNmLENBQUM7UUFFRCxNQUFNLG9CQUFvQixHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUN0RCxJQUFJLENBQUMsYUFBYSxDQUFDLENBQ3BCLENBQUM7UUFFRixJQUFJLGlCQUFpQixHQUFHLENBQUMsQ0FBQztRQUUxQixhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsWUFBWSxFQUFFLEVBQUU7WUFDckMsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLHdDQUF3QyxDQUM5RCxvQkFBb0IsRUFDcEIsWUFBWSxDQUNiLENBQUM7WUFFRixpQkFBaUIsSUFBSSxVQUFVLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLGlCQUFpQixLQUFLLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRU8sc0JBQXNCLENBQzVCLFlBQWlDLEVBQ2pDLGFBQThFO1FBRTlFLE1BQU0sb0JBQW9CLEdBQUcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQ3RELElBQUksQ0FBQyxZQUFZLENBQUMsQ0FDbkIsQ0FBQztRQUVGLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyx3Q0FBd0MsQ0FDOUQsb0JBQW9CLEVBQ3BCLFlBQVksQ0FDYixDQUFDO1FBRUYsT0FBTyxVQUFVLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFTyx3Q0FBd0MsQ0FDOUMsb0JBQTRDLEVBQzVDLE1BQTJCO1FBRTNCLE1BQU0sV0FBVyxHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FDN0MsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FDN0IsQ0FBQztRQUNGLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQztRQUN6RSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBRXRFLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQ25DLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FDN0MsQ0FBQztRQUNGLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUM5QixJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQy9DLENBQUM7UUFFRixPQUFPLGdCQUFnQixDQUFDLE1BQU0sQ0FBQztJQUNqQyxDQUFDO0lBRU8sb0JBQW9CLENBQzFCLElBQVcsRUFDWCxPQUErQjtRQUUvQixNQUFNLFdBQVcsR0FBRyxPQUFPO2FBQ3hCLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUM7YUFDL0IsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFcEMsT0FBTyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMvRCxDQUFDOzhHQXJGVSx1QkFBdUI7a0hBQXZCLHVCQUF1QixjQURWLE1BQU07OzJGQUNuQix1QkFBdUI7a0JBRG5DLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgaW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMb2dnZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vbG9nZ2luZy9sb2dnZXIuc2VydmljZSc7XG5pbXBvcnQgeyBPcGVuSWRDb25maWd1cmF0aW9uIH0gZnJvbSAnLi4vb3BlbmlkLWNvbmZpZ3VyYXRpb24nO1xuaW1wb3J0IHsgTGV2ZWwsIFJ1bGVWYWxpZGF0aW9uUmVzdWx0IH0gZnJvbSAnLi9ydWxlJztcbmltcG9ydCB7IGFsbE11bHRpcGxlQ29uZmlnUnVsZXMsIGFsbFJ1bGVzIH0gZnJvbSAnLi9ydWxlcyc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgQ29uZmlnVmFsaWRhdGlvblNlcnZpY2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IGxvZ2dlclNlcnZpY2UgPSBpbmplY3QoTG9nZ2VyU2VydmljZSk7XG5cbiAgdmFsaWRhdGVDb25maWdzKHBhc3NlZENvbmZpZ3M6IE9wZW5JZENvbmZpZ3VyYXRpb25bXSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnZhbGlkYXRlQ29uZmlnc0ludGVybmFsKFxuICAgICAgcGFzc2VkQ29uZmlncyA/PyBbXSxcbiAgICAgIGFsbE11bHRpcGxlQ29uZmlnUnVsZXNcbiAgICApO1xuICB9XG5cbiAgdmFsaWRhdGVDb25maWcocGFzc2VkQ29uZmlnOiBPcGVuSWRDb25maWd1cmF0aW9uKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdGVDb25maWdJbnRlcm5hbChwYXNzZWRDb25maWcsIGFsbFJ1bGVzKTtcbiAgfVxuXG4gIHByaXZhdGUgdmFsaWRhdGVDb25maWdzSW50ZXJuYWwoXG4gICAgcGFzc2VkQ29uZmlnczogT3BlbklkQ29uZmlndXJhdGlvbltdLFxuICAgIGFsbFJ1bGVzVG9Vc2U6ICgocGFzc2VkQ29uZmlnOiBPcGVuSWRDb25maWd1cmF0aW9uW10pID0+IFJ1bGVWYWxpZGF0aW9uUmVzdWx0KVtdXG4gICk6IGJvb2xlYW4ge1xuICAgIGlmIChwYXNzZWRDb25maWdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IGFsbFZhbGlkYXRpb25SZXN1bHRzID0gYWxsUnVsZXNUb1VzZS5tYXAoKHJ1bGUpID0+XG4gICAgICBydWxlKHBhc3NlZENvbmZpZ3MpXG4gICAgKTtcblxuICAgIGxldCBvdmVyYWxsRXJyb3JDb3VudCA9IDA7XG5cbiAgICBwYXNzZWRDb25maWdzLmZvckVhY2goKHBhc3NlZENvbmZpZykgPT4ge1xuICAgICAgY29uc3QgZXJyb3JDb3VudCA9IHRoaXMucHJvY2Vzc1ZhbGlkYXRpb25SZXN1bHRzQW5kR2V0RXJyb3JDb3VudChcbiAgICAgICAgYWxsVmFsaWRhdGlvblJlc3VsdHMsXG4gICAgICAgIHBhc3NlZENvbmZpZ1xuICAgICAgKTtcblxuICAgICAgb3ZlcmFsbEVycm9yQ291bnQgKz0gZXJyb3JDb3VudDtcbiAgICB9KTtcblxuICAgIHJldHVybiBvdmVyYWxsRXJyb3JDb3VudCA9PT0gMDtcbiAgfVxuXG4gIHByaXZhdGUgdmFsaWRhdGVDb25maWdJbnRlcm5hbChcbiAgICBwYXNzZWRDb25maWc6IE9wZW5JZENvbmZpZ3VyYXRpb24sXG4gICAgYWxsUnVsZXNUb1VzZTogKChwYXNzZWRDb25maWc6IE9wZW5JZENvbmZpZ3VyYXRpb24pID0+IFJ1bGVWYWxpZGF0aW9uUmVzdWx0KVtdXG4gICk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGFsbFZhbGlkYXRpb25SZXN1bHRzID0gYWxsUnVsZXNUb1VzZS5tYXAoKHJ1bGUpID0+XG4gICAgICBydWxlKHBhc3NlZENvbmZpZylcbiAgICApO1xuXG4gICAgY29uc3QgZXJyb3JDb3VudCA9IHRoaXMucHJvY2Vzc1ZhbGlkYXRpb25SZXN1bHRzQW5kR2V0RXJyb3JDb3VudChcbiAgICAgIGFsbFZhbGlkYXRpb25SZXN1bHRzLFxuICAgICAgcGFzc2VkQ29uZmlnXG4gICAgKTtcblxuICAgIHJldHVybiBlcnJvckNvdW50ID09PSAwO1xuICB9XG5cbiAgcHJpdmF0ZSBwcm9jZXNzVmFsaWRhdGlvblJlc3VsdHNBbmRHZXRFcnJvckNvdW50KFxuICAgIGFsbFZhbGlkYXRpb25SZXN1bHRzOiBSdWxlVmFsaWRhdGlvblJlc3VsdFtdLFxuICAgIGNvbmZpZzogT3BlbklkQ29uZmlndXJhdGlvblxuICApOiBudW1iZXIge1xuICAgIGNvbnN0IGFsbE1lc3NhZ2VzID0gYWxsVmFsaWRhdGlvblJlc3VsdHMuZmlsdGVyKFxuICAgICAgKHgpID0+IHgubWVzc2FnZXMubGVuZ3RoID4gMFxuICAgICk7XG4gICAgY29uc3QgYWxsRXJyb3JNZXNzYWdlcyA9IHRoaXMuZ2V0QWxsTWVzc2FnZXNPZlR5cGUoJ2Vycm9yJywgYWxsTWVzc2FnZXMpO1xuICAgIGNvbnN0IGFsbFdhcm5pbmdzID0gdGhpcy5nZXRBbGxNZXNzYWdlc09mVHlwZSgnd2FybmluZycsIGFsbE1lc3NhZ2VzKTtcblxuICAgIGFsbEVycm9yTWVzc2FnZXMuZm9yRWFjaCgobWVzc2FnZSkgPT5cbiAgICAgIHRoaXMubG9nZ2VyU2VydmljZS5sb2dFcnJvcihjb25maWcsIG1lc3NhZ2UpXG4gICAgKTtcbiAgICBhbGxXYXJuaW5ncy5mb3JFYWNoKChtZXNzYWdlKSA9PlxuICAgICAgdGhpcy5sb2dnZXJTZXJ2aWNlLmxvZ1dhcm5pbmcoY29uZmlnLCBtZXNzYWdlKVxuICAgICk7XG5cbiAgICByZXR1cm4gYWxsRXJyb3JNZXNzYWdlcy5sZW5ndGg7XG4gIH1cblxuICBwcml2YXRlIGdldEFsbE1lc3NhZ2VzT2ZUeXBlKFxuICAgIHR5cGU6IExldmVsLFxuICAgIHJlc3VsdHM6IFJ1bGVWYWxpZGF0aW9uUmVzdWx0W11cbiAgKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IGFsbE1lc3NhZ2VzID0gcmVzdWx0c1xuICAgICAgLmZpbHRlcigoeCkgPT4geC5sZXZlbCA9PT0gdHlwZSlcbiAgICAgIC5tYXAoKHJlc3VsdCkgPT4gcmVzdWx0Lm1lc3NhZ2VzKTtcblxuICAgIHJldHVybiBhbGxNZXNzYWdlcy5yZWR1Y2UoKGFjYywgdmFsKSA9PiBhY2MuY29uY2F0KHZhbCksIFtdKTtcbiAgfVxufVxuIl19