import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class FlowHelper {
    isCurrentFlowCodeFlow(configuration) {
        return this.currentFlowIs('code', configuration);
    }
    isCurrentFlowAnyImplicitFlow(configuration) {
        return (this.isCurrentFlowImplicitFlowWithAccessToken(configuration) ||
            this.isCurrentFlowImplicitFlowWithoutAccessToken(configuration));
    }
    isCurrentFlowCodeFlowWithRefreshTokens(configuration) {
        if (!configuration) {
            return false;
        }
        const { useRefreshToken } = configuration;
        return (this.isCurrentFlowCodeFlow(configuration) && Boolean(useRefreshToken));
    }
    isCurrentFlowImplicitFlowWithAccessToken(configuration) {
        return this.currentFlowIs('id_token token', configuration);
    }
    currentFlowIs(flowTypes, configuration) {
        const { responseType } = configuration;
        if (Array.isArray(flowTypes)) {
            return flowTypes.some((x) => responseType === x);
        }
        return responseType === flowTypes;
    }
    isCurrentFlowImplicitFlowWithoutAccessToken(configuration) {
        return this.currentFlowIs('id_token', configuration);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: FlowHelper, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: FlowHelper, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: FlowHelper, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxvdy1oZWxwZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYXV0aC1vaWRjLWNsaWVudC9zcmMvbGliL3V0aWxzL2Zsb3dIZWxwZXIvZmxvdy1oZWxwZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUkzQyxNQUFNLE9BQU8sVUFBVTtJQUNyQixxQkFBcUIsQ0FBQyxhQUFrQztRQUN0RCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCw0QkFBNEIsQ0FBQyxhQUFrQztRQUM3RCxPQUFPLENBQ0wsSUFBSSxDQUFDLHdDQUF3QyxDQUFDLGFBQWEsQ0FBQztZQUM1RCxJQUFJLENBQUMsMkNBQTJDLENBQUMsYUFBYSxDQUFDLENBQ2hFLENBQUM7SUFDSixDQUFDO0lBRUQsc0NBQXNDLENBQ3BDLGFBQXlDO1FBRXpDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUNuQixPQUFPLEtBQUssQ0FBQztRQUNmLENBQUM7UUFFRCxNQUFNLEVBQUUsZUFBZSxFQUFFLEdBQUcsYUFBYSxDQUFDO1FBRTFDLE9BQU8sQ0FDTCxJQUFJLENBQUMscUJBQXFCLENBQUMsYUFBYSxDQUFDLElBQUksT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUN0RSxDQUFDO0lBQ0osQ0FBQztJQUVELHdDQUF3QyxDQUN0QyxhQUFrQztRQUVsQyxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVELGFBQWEsQ0FDWCxTQUE0QixFQUM1QixhQUFrQztRQUVsQyxNQUFNLEVBQUUsWUFBWSxFQUFFLEdBQUcsYUFBYSxDQUFDO1FBRXZDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO1lBQzdCLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ25ELENBQUM7UUFFRCxPQUFPLFlBQVksS0FBSyxTQUFTLENBQUM7SUFDcEMsQ0FBQztJQUVPLDJDQUEyQyxDQUNqRCxhQUFrQztRQUVsQyxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7OEdBakRVLFVBQVU7a0hBQVYsVUFBVSxjQURHLE1BQU07OzJGQUNuQixVQUFVO2tCQUR0QixVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9wZW5JZENvbmZpZ3VyYXRpb24gfSBmcm9tICcuLi8uLi9jb25maWcvb3BlbmlkLWNvbmZpZ3VyYXRpb24nO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIEZsb3dIZWxwZXIge1xuICBpc0N1cnJlbnRGbG93Q29kZUZsb3coY29uZmlndXJhdGlvbjogT3BlbklkQ29uZmlndXJhdGlvbik6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRGbG93SXMoJ2NvZGUnLCBjb25maWd1cmF0aW9uKTtcbiAgfVxuXG4gIGlzQ3VycmVudEZsb3dBbnlJbXBsaWNpdEZsb3coY29uZmlndXJhdGlvbjogT3BlbklkQ29uZmlndXJhdGlvbik6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmlzQ3VycmVudEZsb3dJbXBsaWNpdEZsb3dXaXRoQWNjZXNzVG9rZW4oY29uZmlndXJhdGlvbikgfHxcbiAgICAgIHRoaXMuaXNDdXJyZW50Rmxvd0ltcGxpY2l0Rmxvd1dpdGhvdXRBY2Nlc3NUb2tlbihjb25maWd1cmF0aW9uKVxuICAgICk7XG4gIH1cblxuICBpc0N1cnJlbnRGbG93Q29kZUZsb3dXaXRoUmVmcmVzaFRva2VucyhcbiAgICBjb25maWd1cmF0aW9uOiBPcGVuSWRDb25maWd1cmF0aW9uIHwgbnVsbFxuICApOiBib29sZWFuIHtcbiAgICBpZiAoIWNvbmZpZ3VyYXRpb24pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCB7IHVzZVJlZnJlc2hUb2tlbiB9ID0gY29uZmlndXJhdGlvbjtcblxuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmlzQ3VycmVudEZsb3dDb2RlRmxvdyhjb25maWd1cmF0aW9uKSAmJiBCb29sZWFuKHVzZVJlZnJlc2hUb2tlbilcbiAgICApO1xuICB9XG5cbiAgaXNDdXJyZW50Rmxvd0ltcGxpY2l0Rmxvd1dpdGhBY2Nlc3NUb2tlbihcbiAgICBjb25maWd1cmF0aW9uOiBPcGVuSWRDb25maWd1cmF0aW9uXG4gICk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRGbG93SXMoJ2lkX3Rva2VuIHRva2VuJywgY29uZmlndXJhdGlvbik7XG4gIH1cblxuICBjdXJyZW50Rmxvd0lzKFxuICAgIGZsb3dUeXBlczogc3RyaW5nW10gfCBzdHJpbmcsXG4gICAgY29uZmlndXJhdGlvbjogT3BlbklkQ29uZmlndXJhdGlvblxuICApOiBib29sZWFuIHtcbiAgICBjb25zdCB7IHJlc3BvbnNlVHlwZSB9ID0gY29uZmlndXJhdGlvbjtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KGZsb3dUeXBlcykpIHtcbiAgICAgIHJldHVybiBmbG93VHlwZXMuc29tZSgoeCkgPT4gcmVzcG9uc2VUeXBlID09PSB4KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzcG9uc2VUeXBlID09PSBmbG93VHlwZXM7XG4gIH1cblxuICBwcml2YXRlIGlzQ3VycmVudEZsb3dJbXBsaWNpdEZsb3dXaXRob3V0QWNjZXNzVG9rZW4oXG4gICAgY29uZmlndXJhdGlvbjogT3BlbklkQ29uZmlndXJhdGlvblxuICApOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50Rmxvd0lzKCdpZF90b2tlbicsIGNvbmZpZ3VyYXRpb24pO1xuICB9XG59XG4iXX0=