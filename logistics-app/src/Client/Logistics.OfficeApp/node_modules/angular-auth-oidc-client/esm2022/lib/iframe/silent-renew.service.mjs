import { HttpParams } from '@angular/common/http';
import { Injectable, inject } from '@angular/core';
import { Subject, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { AuthStateService } from '../auth-state/auth-state.service';
import { ImplicitFlowCallbackService } from '../callback/implicit-flow-callback.service';
import { IntervalService } from '../callback/interval.service';
import { FlowsDataService } from '../flows/flows-data.service';
import { FlowsService } from '../flows/flows.service';
import { ResetAuthDataService } from '../flows/reset-auth-data.service';
import { LoggerService } from '../logging/logger.service';
import { FlowHelper } from '../utils/flowHelper/flow-helper.service';
import { ValidationResult } from '../validation/validation-result';
import { IFrameService } from './existing-iframe.service';
import * as i0 from "@angular/core";
const IFRAME_FOR_SILENT_RENEW_IDENTIFIER = 'myiFrameForSilentRenew';
export class SilentRenewService {
    constructor() {
        this.refreshSessionWithIFrameCompletedInternal$ = new Subject();
        this.loggerService = inject(LoggerService);
        this.iFrameService = inject(IFrameService);
        this.flowsService = inject(FlowsService);
        this.resetAuthDataService = inject(ResetAuthDataService);
        this.flowsDataService = inject(FlowsDataService);
        this.authStateService = inject(AuthStateService);
        this.flowHelper = inject(FlowHelper);
        this.implicitFlowCallbackService = inject(ImplicitFlowCallbackService);
        this.intervalService = inject(IntervalService);
    }
    get refreshSessionWithIFrameCompleted$() {
        return this.refreshSessionWithIFrameCompletedInternal$.asObservable();
    }
    getOrCreateIframe(config) {
        const existingIframe = this.getExistingIframe();
        if (!existingIframe) {
            return this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_SILENT_RENEW_IDENTIFIER, config);
        }
        return existingIframe;
    }
    isSilentRenewConfigured(configuration) {
        const { useRefreshToken, silentRenew } = configuration;
        return !useRefreshToken && Boolean(silentRenew);
    }
    codeFlowCallbackSilentRenewIframe(urlParts, config, allConfigs) {
        const params = new HttpParams({
            fromString: urlParts[1],
        });
        const errorParam = params.get('error');
        if (errorParam) {
            this.authStateService.updateAndPublishAuthState({
                isAuthenticated: false,
                validationResult: ValidationResult.LoginRequired,
                isRenewProcess: true,
            });
            this.resetAuthDataService.resetAuthorizationData(config, allConfigs);
            this.flowsDataService.setNonce('', config);
            this.intervalService.stopPeriodicTokenCheck();
            return throwError(() => new Error(errorParam));
        }
        const code = params.get('code') ?? '';
        const state = params.get('state') ?? '';
        const sessionState = params.get('session_state');
        const callbackContext = {
            code,
            refreshToken: '',
            state,
            sessionState,
            authResult: null,
            isRenewProcess: true,
            jwtKeys: null,
            validationResult: null,
            existingIdToken: null,
        };
        return this.flowsService
            .processSilentRenewCodeFlowCallback(callbackContext, config, allConfigs)
            .pipe(catchError((error) => {
            this.intervalService.stopPeriodicTokenCheck();
            this.resetAuthDataService.resetAuthorizationData(config, allConfigs);
            return throwError(() => new Error(error));
        }));
    }
    silentRenewEventHandler(e, config, allConfigs) {
        this.loggerService.logDebug(config, 'silentRenewEventHandler');
        if (!e.detail) {
            return;
        }
        let callback$;
        const isCodeFlow = this.flowHelper.isCurrentFlowCodeFlow(config);
        if (isCodeFlow) {
            const urlParts = e.detail.toString().split('?');
            callback$ = this.codeFlowCallbackSilentRenewIframe(urlParts, config, allConfigs);
        }
        else {
            callback$ =
                this.implicitFlowCallbackService.authenticatedImplicitFlowCallback(config, allConfigs, e.detail);
        }
        callback$.subscribe({
            next: (callbackContext) => {
                this.refreshSessionWithIFrameCompletedInternal$.next(callbackContext);
                this.flowsDataService.resetSilentRenewRunning(config);
            },
            error: (err) => {
                this.loggerService.logError(config, 'Error: ' + err);
                this.refreshSessionWithIFrameCompletedInternal$.next(null);
                this.flowsDataService.resetSilentRenewRunning(config);
            },
        });
    }
    getExistingIframe() {
        return this.iFrameService.getExistingIFrame(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: SilentRenewService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: SilentRenewService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: SilentRenewService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,