import { Injectable, inject } from '@angular/core';
import { AuthStateService } from '../auth-state/auth-state.service';
import { ConfigurationService } from '../config/config.service';
import { LoggerService } from '../logging/logger.service';
import { flattenArray } from '../utils/collections/collections.helper';
import { ClosestMatchingRouteService } from './closest-matching-route.service';
import * as i0 from "@angular/core";
export class AuthInterceptor {
    constructor() {
        this.authStateService = inject(AuthStateService);
        this.configurationService = inject(ConfigurationService);
        this.loggerService = inject(LoggerService);
        this.closestMatchingRouteService = inject(ClosestMatchingRouteService);
    }
    intercept(req, next) {
        return interceptRequest(req, next.handle, {
            configurationService: this.configurationService,
            authStateService: this.authStateService,
            closestMatchingRouteService: this.closestMatchingRouteService,
            loggerService: this.loggerService,
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: AuthInterceptor, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: AuthInterceptor }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: AuthInterceptor, decorators: [{
            type: Injectable
        }] });
export function authInterceptor() {
    return (req, next) => {
        return interceptRequest(req, next, {
            configurationService: inject(ConfigurationService),
            authStateService: inject(AuthStateService),
            closestMatchingRouteService: inject(ClosestMatchingRouteService),
            loggerService: inject(LoggerService),
        });
    };
}
function interceptRequest(req, next, deps) {
    if (!deps.configurationService.hasAtLeastOneConfig()) {
        return next(req);
    }
    const allConfigurations = deps.configurationService.getAllConfigurations();
    const allRoutesConfigured = allConfigurations.map((x) => x.secureRoutes || []);
    const allRoutesConfiguredFlat = flattenArray(allRoutesConfigured);
    if (allRoutesConfiguredFlat.length === 0) {
        deps.loggerService.logDebug(allConfigurations[0], `No routes to check configured`);
        return next(req);
    }
    const { matchingConfig, matchingRoute } = deps.closestMatchingRouteService.getConfigIdForClosestMatchingRoute(req.url, allConfigurations);
    if (!matchingConfig) {
        deps.loggerService.logDebug(allConfigurations[0], `Did not find any configured route for route ${req.url}`);
        return next(req);
    }
    deps.loggerService.logDebug(matchingConfig, `'${req.url}' matches configured route '${matchingRoute}'`);
    const token = deps.authStateService.getAccessToken(matchingConfig);
    if (!token) {
        deps.loggerService.logDebug(matchingConfig, `Wanted to add token to ${req.url} but found no token: '${token}'`);
        return next(req);
    }
    deps.loggerService.logDebug(matchingConfig, `'${req.url}' matches configured route '${matchingRoute}', adding token`);
    req = req.clone({
        headers: req.headers.set('Authorization', 'Bearer ' + token),
    });
    return next(req);
}
//# sourceMappingURL=data:application/json;base64,