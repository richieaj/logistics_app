import { DOCUMENT } from '@angular/common';
import { Injectable, inject } from '@angular/core';
import { Subject } from 'rxjs';
import { LoggerService } from '../../logging/logger.service';
import { StoragePersistenceService } from '../../storage/storage-persistence.service';
import * as i0 from "@angular/core";
export class PopUpService {
    constructor() {
        this.loggerService = inject(LoggerService);
        this.storagePersistenceService = inject(StoragePersistenceService);
        this.document = inject(DOCUMENT);
        this.STORAGE_IDENTIFIER = 'popupauth';
        this.popUp = null;
        this.handle = -1;
        this.resultInternal$ = new Subject();
    }
    get result$() {
        return this.resultInternal$.asObservable();
    }
    get windowInternal() {
        return this.document.defaultView;
    }
    isCurrentlyInPopup(config) {
        if (this.canAccessSessionStorage()) {
            const popup = this.storagePersistenceService.read(this.STORAGE_IDENTIFIER, config);
            const windowIdentifier = this.windowInternal;
            if (!windowIdentifier) {
                return false;
            }
            return (Boolean(windowIdentifier.opener) &&
                windowIdentifier.opener !== windowIdentifier &&
                Boolean(popup));
        }
        return false;
    }
    openPopUp(url, popupOptions, config) {
        const optionsToPass = this.getOptions(popupOptions);
        this.storagePersistenceService.write(this.STORAGE_IDENTIFIER, 'true', config);
        const windowIdentifier = this.windowInternal;
        if (!windowIdentifier) {
            return;
        }
        if (!url) {
            this.loggerService.logError(config, 'Could not open popup, url is empty');
            return;
        }
        this.popUp = windowIdentifier.open(url, '_blank', optionsToPass);
        if (!this.popUp) {
            this.storagePersistenceService.remove(this.STORAGE_IDENTIFIER, config);
            this.loggerService.logError(config, 'Could not open popup');
            return;
        }
        this.loggerService.logDebug(config, 'Opened popup with url ' + url);
        const listener = (event) => {
            if (!event?.data || typeof event.data !== 'string') {
                this.cleanUp(listener, config);
                return;
            }
            this.loggerService.logDebug(config, 'Received message from popup with url ' + event.data);
            this.resultInternal$.next({ userClosed: false, receivedUrl: event.data });
            this.cleanUp(listener, config);
        };
        windowIdentifier.addEventListener('message', listener, false);
        this.handle = windowIdentifier.setInterval(() => {
            if (this.popUp?.closed) {
                this.resultInternal$.next({ userClosed: true, receivedUrl: '' });
                this.cleanUp(listener, config);
            }
        }, 200);
    }
    sendMessageToMainWindow(url, config) {
        const windowIdentifier = this.windowInternal;
        if (!windowIdentifier) {
            return;
        }
        if (windowIdentifier.opener) {
            const href = windowIdentifier.location.href;
            this.sendMessage(url, href, config);
        }
    }
    cleanUp(listener, config) {
        const windowIdentifier = this.windowInternal;
        if (!windowIdentifier) {
            return;
        }
        windowIdentifier.removeEventListener('message', listener, false);
        windowIdentifier.clearInterval(this.handle);
        if (this.popUp) {
            this.storagePersistenceService.remove(this.STORAGE_IDENTIFIER, config);
            this.popUp.close();
            this.popUp = null;
        }
    }
    sendMessage(url, href, config) {
        const windowIdentifier = this.windowInternal;
        if (!windowIdentifier) {
            return;
        }
        if (!url) {
            this.loggerService.logDebug(config, `Can not send message to parent, no url: '${url}'`);
            return;
        }
        windowIdentifier.opener.postMessage(url, href);
    }
    getOptions(popupOptions) {
        const popupDefaultOptions = {
            width: 500,
            height: 500,
            left: 50,
            top: 50,
        };
        const options = {
            ...popupDefaultOptions,
            ...(popupOptions || {}),
        };
        const windowIdentifier = this.windowInternal;
        if (!windowIdentifier) {
            return '';
        }
        const width = options.width || popupDefaultOptions.width;
        const height = options.height || popupDefaultOptions.height;
        const left = windowIdentifier.screenLeft + (windowIdentifier.outerWidth - width) / 2;
        const top = windowIdentifier.screenTop + (windowIdentifier.outerHeight - height) / 2;
        options.left = left;
        options.top = top;
        return Object.entries(options)
            .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)
            .join(',');
    }
    canAccessSessionStorage() {
        return (typeof navigator !== 'undefined' &&
            navigator.cookieEnabled &&
            typeof Storage !== 'undefined');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: PopUpService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: PopUpService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: PopUpService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,