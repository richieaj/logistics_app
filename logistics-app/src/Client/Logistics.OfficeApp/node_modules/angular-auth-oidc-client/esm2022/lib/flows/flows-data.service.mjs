import { Injectable, inject } from '@angular/core';
import { LoggerService } from '../logging/logger.service';
import { StoragePersistenceService } from '../storage/storage-persistence.service';
import { RandomService } from './random/random.service';
import * as i0 from "@angular/core";
export class FlowsDataService {
    constructor() {
        this.loggerService = inject(LoggerService);
        this.storagePersistenceService = inject(StoragePersistenceService);
        this.randomService = inject(RandomService);
    }
    createNonce(configuration) {
        const nonce = this.randomService.createRandom(40, configuration);
        this.loggerService.logDebug(configuration, 'Nonce created. nonce:' + nonce);
        this.setNonce(nonce, configuration);
        return nonce;
    }
    setNonce(nonce, configuration) {
        this.storagePersistenceService.write('authNonce', nonce, configuration);
    }
    getAuthStateControl(configuration) {
        if (!configuration) {
            return '';
        }
        return this.storagePersistenceService.read('authStateControl', configuration);
    }
    setAuthStateControl(authStateControl, configuration) {
        if (!configuration) {
            return false;
        }
        return this.storagePersistenceService.write('authStateControl', authStateControl, configuration);
    }
    getExistingOrCreateAuthStateControl(configuration) {
        let state = this.storagePersistenceService.read('authStateControl', configuration);
        if (!state) {
            state = this.randomService.createRandom(40, configuration);
            this.storagePersistenceService.write('authStateControl', state, configuration);
        }
        return state;
    }
    setSessionState(sessionState, configuration) {
        this.storagePersistenceService.write('session_state', sessionState, configuration);
    }
    resetStorageFlowData(configuration) {
        this.storagePersistenceService.resetStorageFlowData(configuration);
    }
    getCodeVerifier(configuration) {
        return this.storagePersistenceService.read('codeVerifier', configuration);
    }
    createCodeVerifier(configuration) {
        const codeVerifier = this.randomService.createRandom(67, configuration);
        this.storagePersistenceService.write('codeVerifier', codeVerifier, configuration);
        return codeVerifier;
    }
    isCodeFlowInProgress(configuration) {
        return !!this.storagePersistenceService.read('storageCodeFlowInProgress', configuration);
    }
    setCodeFlowInProgress(configuration) {
        this.storagePersistenceService.write('storageCodeFlowInProgress', true, configuration);
    }
    resetCodeFlowInProgress(configuration) {
        this.storagePersistenceService.write('storageCodeFlowInProgress', false, configuration);
    }
    isSilentRenewRunning(configuration) {
        const { configId, silentRenewTimeoutInSeconds } = configuration;
        const storageObject = this.getSilentRenewRunningStorageEntry(configuration);
        if (!storageObject) {
            return false;
        }
        if (storageObject.state === 'not-running') {
            return false;
        }
        const timeOutInMilliseconds = (silentRenewTimeoutInSeconds ?? 0) * 1000;
        const dateOfLaunchedProcessUtc = Date.parse(storageObject.dateOfLaunchedProcessUtc);
        const currentDateUtc = Date.parse(new Date().toISOString());
        const elapsedTimeInMilliseconds = Math.abs(currentDateUtc - dateOfLaunchedProcessUtc);
        const isProbablyStuck = elapsedTimeInMilliseconds > timeOutInMilliseconds;
        if (isProbablyStuck) {
            this.loggerService.logDebug(configuration, 'silent renew process is probably stuck, state will be reset.', configId);
            this.resetSilentRenewRunning(configuration);
            return false;
        }
        return storageObject.state === 'running';
    }
    setSilentRenewRunning(configuration) {
        const storageObject = {
            state: 'running',
            dateOfLaunchedProcessUtc: new Date().toISOString(),
        };
        this.storagePersistenceService.write('storageSilentRenewRunning', JSON.stringify(storageObject), configuration);
    }
    resetSilentRenewRunning(configuration) {
        if (!configuration) {
            return;
        }
        this.storagePersistenceService.write('storageSilentRenewRunning', '', configuration);
    }
    getSilentRenewRunningStorageEntry(configuration) {
        const storageEntry = this.storagePersistenceService.read('storageSilentRenewRunning', configuration);
        if (!storageEntry) {
            return {
                dateOfLaunchedProcessUtc: '',
                state: 'not-running',
            };
        }
        return JSON.parse(storageEntry);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: FlowsDataService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: FlowsDataService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: FlowsDataService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,