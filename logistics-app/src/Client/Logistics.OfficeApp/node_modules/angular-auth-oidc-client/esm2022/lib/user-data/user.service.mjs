import { Injectable, inject } from '@angular/core';
import { BehaviorSubject, of, throwError } from 'rxjs';
import { map, retry, switchMap } from 'rxjs/operators';
import { DataService } from '../api/data.service';
import { LoggerService } from '../logging/logger.service';
import { EventTypes } from '../public-events/event-types';
import { PublicEventsService } from '../public-events/public-events.service';
import { StoragePersistenceService } from '../storage/storage-persistence.service';
import { FlowHelper } from '../utils/flowHelper/flow-helper.service';
import { TokenHelperService } from '../utils/tokenHelper/token-helper.service';
import * as i0 from "@angular/core";
const DEFAULT_USERRESULT = { userData: null, allUserData: [] };
export class UserService {
    constructor() {
        this.userDataInternal$ = new BehaviorSubject(DEFAULT_USERRESULT);
        this.loggerService = inject(LoggerService);
        this.tokenHelperService = inject(TokenHelperService);
        this.flowHelper = inject(FlowHelper);
        this.oidcDataService = inject(DataService);
        this.storagePersistenceService = inject(StoragePersistenceService);
        this.eventService = inject(PublicEventsService);
    }
    get userData$() {
        return this.userDataInternal$.asObservable();
    }
    getAndPersistUserDataInStore(currentConfiguration, allConfigs, isRenewProcess = false, idToken, decodedIdToken) {
        idToken =
            idToken ||
                this.storagePersistenceService.getIdToken(currentConfiguration);
        decodedIdToken =
            decodedIdToken ||
                this.tokenHelperService.getPayloadFromToken(idToken, false, currentConfiguration);
        const existingUserDataFromStorage = this.getUserDataFromStore(currentConfiguration);
        const haveUserData = !!existingUserDataFromStorage;
        const isCurrentFlowImplicitFlowWithAccessToken = this.flowHelper.isCurrentFlowImplicitFlowWithAccessToken(currentConfiguration);
        const isCurrentFlowCodeFlow = this.flowHelper.isCurrentFlowCodeFlow(currentConfiguration);
        const accessToken = this.storagePersistenceService.getAccessToken(currentConfiguration);
        if (!(isCurrentFlowImplicitFlowWithAccessToken || isCurrentFlowCodeFlow)) {
            this.loggerService.logDebug(currentConfiguration, `authCallback idToken flow with accessToken ${accessToken}`);
            this.setUserDataToStore(decodedIdToken, currentConfiguration, allConfigs);
            return of(decodedIdToken);
        }
        const { renewUserInfoAfterTokenRenew } = currentConfiguration;
        if (!isRenewProcess || renewUserInfoAfterTokenRenew || !haveUserData) {
            return this.getUserDataOidcFlowAndSave(decodedIdToken.sub, currentConfiguration, allConfigs).pipe(switchMap((userData) => {
                this.loggerService.logDebug(currentConfiguration, 'Received user data: ', userData);
                if (!!userData) {
                    this.loggerService.logDebug(currentConfiguration, 'accessToken: ', accessToken);
                    return of(userData);
                }
                else {
                    return throwError(() => new Error('Received no user data, request failed'));
                }
            }));
        }
        return of(existingUserDataFromStorage);
    }
    getUserDataFromStore(currentConfiguration) {
        if (!currentConfiguration) {
            return throwError(() => new Error('Please provide a configuration before setting up the module'));
        }
        return (this.storagePersistenceService.read('userData', currentConfiguration) ||
            null);
    }
    publishUserDataIfExists(currentConfiguration, allConfigs) {
        const userData = this.getUserDataFromStore(currentConfiguration);
        if (userData) {
            this.fireUserDataEvent(currentConfiguration, allConfigs, userData);
        }
    }
    setUserDataToStore(userData, currentConfiguration, allConfigs) {
        this.storagePersistenceService.write('userData', userData, currentConfiguration);
        this.fireUserDataEvent(currentConfiguration, allConfigs, userData);
    }
    resetUserDataInStore(currentConfiguration, allConfigs) {
        this.storagePersistenceService.remove('userData', currentConfiguration);
        this.fireUserDataEvent(currentConfiguration, allConfigs, null);
    }
    getUserDataOidcFlowAndSave(idTokenSub, currentConfiguration, allConfigs) {
        return this.getIdentityUserData(currentConfiguration).pipe(map((data) => {
            if (this.validateUserDataSubIdToken(currentConfiguration, idTokenSub, data?.sub)) {
                this.setUserDataToStore(data, currentConfiguration, allConfigs);
                return data;
            }
            else {
                // something went wrong, user data sub does not match that from id_token
                this.loggerService.logWarning(currentConfiguration, `User data sub does not match sub in id_token, resetting`);
                this.resetUserDataInStore(currentConfiguration, allConfigs);
                return null;
            }
        }));
    }
    getIdentityUserData(currentConfiguration) {
        const token = this.storagePersistenceService.getAccessToken(currentConfiguration);
        const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', currentConfiguration);
        if (!authWellKnownEndPoints) {
            this.loggerService.logWarning(currentConfiguration, 'init check session: authWellKnownEndpoints is undefined');
            return throwError(() => new Error('authWellKnownEndpoints is undefined'));
        }
        const userInfoEndpoint = authWellKnownEndPoints.userInfoEndpoint;
        if (!userInfoEndpoint) {
            this.loggerService.logError(currentConfiguration, 'init check session: authWellKnownEndpoints.userinfo_endpoint is undefined; set auto_userinfo = false in config');
            return throwError(() => new Error('authWellKnownEndpoints.userinfo_endpoint is undefined'));
        }
        return this.oidcDataService
            .get(userInfoEndpoint, currentConfiguration, token)
            .pipe(retry(2));
    }
    validateUserDataSubIdToken(currentConfiguration, idTokenSub, userDataSub) {
        if (!idTokenSub) {
            return false;
        }
        if (!userDataSub) {
            return false;
        }
        if (idTokenSub.toString() !== userDataSub.toString()) {
            this.loggerService.logDebug(currentConfiguration, 'validateUserDataSubIdToken failed', idTokenSub, userDataSub);
            return false;
        }
        return true;
    }
    fireUserDataEvent(currentConfiguration, allConfigs, passedUserData) {
        const userData = this.composeSingleOrMultipleUserDataObject(currentConfiguration, allConfigs, passedUserData);
        this.userDataInternal$.next(userData);
        const { configId } = currentConfiguration;
        this.eventService.fireEvent(EventTypes.UserDataChanged, {
            configId,
            userData: passedUserData,
        });
    }
    composeSingleOrMultipleUserDataObject(currentConfiguration, allConfigs, passedUserData) {
        const hasManyConfigs = allConfigs.length > 1;
        if (!hasManyConfigs) {
            const { configId } = currentConfiguration;
            return this.composeSingleUserDataResult(configId ?? '', passedUserData);
        }
        const allUserData = allConfigs.map((config) => {
            const currentConfigId = currentConfiguration.configId ?? '';
            const configId = config.configId ?? '';
            if (this.currentConfigIsToUpdate(currentConfigId, config)) {
                return { configId, userData: passedUserData };
            }
            const alreadySavedUserData = this.storagePersistenceService.read('userData', config) || null;
            return {
                configId,
                userData: alreadySavedUserData,
            };
        });
        return {
            userData: null,
            allUserData,
        };
    }
    composeSingleUserDataResult(configId, userData) {
        return {
            userData,
            allUserData: [{ configId, userData }],
        };
    }
    currentConfigIsToUpdate(configId, config) {
        return config.configId === configId;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: UserService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: UserService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: UserService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,