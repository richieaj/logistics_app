import { Injectable, inject } from '@angular/core';
import { concatMap } from 'rxjs/operators';
import { CodeFlowCallbackHandlerService } from './callback-handling/code-flow-callback-handler.service';
import { HistoryJwtKeysCallbackHandlerService } from './callback-handling/history-jwt-keys-callback-handler.service';
import { ImplicitFlowCallbackHandlerService } from './callback-handling/implicit-flow-callback-handler.service';
import { RefreshSessionCallbackHandlerService } from './callback-handling/refresh-session-callback-handler.service';
import { RefreshTokenCallbackHandlerService } from './callback-handling/refresh-token-callback-handler.service';
import { StateValidationCallbackHandlerService } from './callback-handling/state-validation-callback-handler.service';
import { UserCallbackHandlerService } from './callback-handling/user-callback-handler.service';
import * as i0 from "@angular/core";
export class FlowsService {
    constructor() {
        this.codeFlowCallbackHandlerService = inject(CodeFlowCallbackHandlerService);
        this.implicitFlowCallbackHandlerService = inject(ImplicitFlowCallbackHandlerService);
        this.historyJwtKeysCallbackHandlerService = inject(HistoryJwtKeysCallbackHandlerService);
        this.userHandlerService = inject(UserCallbackHandlerService);
        this.stateValidationCallbackHandlerService = inject(StateValidationCallbackHandlerService);
        this.refreshSessionCallbackHandlerService = inject(RefreshSessionCallbackHandlerService);
        this.refreshTokenCallbackHandlerService = inject(RefreshTokenCallbackHandlerService);
    }
    processCodeFlowCallback(urlToCheck, config, allConfigs) {
        return this.codeFlowCallbackHandlerService
            .codeFlowCallback(urlToCheck, config)
            .pipe(concatMap((callbackContext) => this.codeFlowCallbackHandlerService.codeFlowCodeRequest(callbackContext, config)), concatMap((callbackContext) => this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext, config, allConfigs)), concatMap((callbackContext) => this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext, config, allConfigs)), concatMap((callbackContext) => this.userHandlerService.callbackUser(callbackContext, config, allConfigs)));
    }
    processSilentRenewCodeFlowCallback(firstContext, config, allConfigs) {
        return this.codeFlowCallbackHandlerService
            .codeFlowCodeRequest(firstContext, config)
            .pipe(concatMap((callbackContext) => this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext, config, allConfigs)), concatMap((callbackContext) => this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext, config, allConfigs)), concatMap((callbackContext) => this.userHandlerService.callbackUser(callbackContext, config, allConfigs)));
    }
    processImplicitFlowCallback(config, allConfigs, hash) {
        return this.implicitFlowCallbackHandlerService
            .implicitFlowCallback(config, allConfigs, hash)
            .pipe(concatMap((callbackContext) => this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext, config, allConfigs)), concatMap((callbackContext) => this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext, config, allConfigs)), concatMap((callbackContext) => this.userHandlerService.callbackUser(callbackContext, config, allConfigs)));
    }
    processRefreshToken(config, allConfigs, customParamsRefresh) {
        return this.refreshSessionCallbackHandlerService
            .refreshSessionWithRefreshTokens(config)
            .pipe(concatMap((callbackContext) => this.refreshTokenCallbackHandlerService.refreshTokensRequestTokens(callbackContext, config, customParamsRefresh)), concatMap((callbackContext) => this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext, config, allConfigs)), concatMap((callbackContext) => this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext, config, allConfigs)), concatMap((callbackContext) => this.userHandlerService.callbackUser(callbackContext, config, allConfigs)));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: FlowsService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: FlowsService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: FlowsService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,