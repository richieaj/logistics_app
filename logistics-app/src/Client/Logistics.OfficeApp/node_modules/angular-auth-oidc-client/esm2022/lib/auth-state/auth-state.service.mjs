import { Injectable, inject } from '@angular/core';
import { BehaviorSubject, throwError } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';
import { LoggerService } from '../logging/logger.service';
import { EventTypes } from '../public-events/event-types';
import { PublicEventsService } from '../public-events/public-events.service';
import { StoragePersistenceService } from '../storage/storage-persistence.service';
import { TokenValidationService } from '../validation/token-validation.service';
import * as i0 from "@angular/core";
const DEFAULT_AUTHRESULT = {
    isAuthenticated: false,
    allConfigsAuthenticated: [],
};
export class AuthStateService {
    constructor() {
        this.storagePersistenceService = inject(StoragePersistenceService);
        this.loggerService = inject(LoggerService);
        this.publicEventsService = inject(PublicEventsService);
        this.tokenValidationService = inject(TokenValidationService);
        this.authenticatedInternal$ = new BehaviorSubject(DEFAULT_AUTHRESULT);
    }
    get authenticated$() {
        return this.authenticatedInternal$
            .asObservable()
            .pipe(distinctUntilChanged());
    }
    setAuthenticatedAndFireEvent(allConfigs) {
        const result = this.composeAuthenticatedResult(allConfigs);
        this.authenticatedInternal$.next(result);
    }
    setUnauthenticatedAndFireEvent(currentConfig, allConfigs) {
        this.storagePersistenceService.resetAuthStateInStorage(currentConfig);
        const result = this.composeUnAuthenticatedResult(allConfigs);
        this.authenticatedInternal$.next(result);
    }
    updateAndPublishAuthState(authenticationResult) {
        this.publicEventsService.fireEvent(EventTypes.NewAuthenticationResult, authenticationResult);
    }
    setAuthorizationData(accessToken, authResult, currentConfig, allConfigs) {
        this.loggerService.logDebug(currentConfig, `storing the accessToken '${accessToken}'`);
        this.storagePersistenceService.write('authzData', accessToken, currentConfig);
        this.persistAccessTokenExpirationTime(authResult, currentConfig);
        this.setAuthenticatedAndFireEvent(allConfigs);
    }
    getAccessToken(configuration) {
        if (!configuration) {
            return '';
        }
        if (!this.isAuthenticated(configuration)) {
            return '';
        }
        const token = this.storagePersistenceService.getAccessToken(configuration);
        return this.decodeURIComponentSafely(token);
    }
    getIdToken(configuration) {
        if (!configuration) {
            return '';
        }
        if (!this.isAuthenticated(configuration)) {
            return '';
        }
        const token = this.storagePersistenceService.getIdToken(configuration);
        return this.decodeURIComponentSafely(token);
    }
    getRefreshToken(configuration) {
        if (!configuration) {
            return '';
        }
        if (!this.isAuthenticated(configuration)) {
            return '';
        }
        const token = this.storagePersistenceService.getRefreshToken(configuration);
        return this.decodeURIComponentSafely(token);
    }
    getAuthenticationResult(configuration) {
        if (!configuration) {
            return null;
        }
        if (!this.isAuthenticated(configuration)) {
            return null;
        }
        return this.storagePersistenceService.getAuthenticationResult(configuration);
    }
    areAuthStorageTokensValid(configuration) {
        if (!configuration) {
            return false;
        }
        if (!this.isAuthenticated(configuration)) {
            return false;
        }
        if (this.hasIdTokenExpiredAndRenewCheckIsEnabled(configuration)) {
            this.loggerService.logDebug(configuration, 'persisted idToken is expired');
            return false;
        }
        if (this.hasAccessTokenExpiredIfExpiryExists(configuration)) {
            this.loggerService.logDebug(configuration, 'persisted accessToken is expired');
            return false;
        }
        this.loggerService.logDebug(configuration, 'persisted idToken and accessToken are valid');
        return true;
    }
    hasIdTokenExpiredAndRenewCheckIsEnabled(configuration) {
        const { renewTimeBeforeTokenExpiresInSeconds, triggerRefreshWhenIdTokenExpired, disableIdTokenValidation, } = configuration;
        if (!triggerRefreshWhenIdTokenExpired || disableIdTokenValidation) {
            return false;
        }
        const tokenToCheck = this.storagePersistenceService.getIdToken(configuration);
        const idTokenExpired = this.tokenValidationService.hasIdTokenExpired(tokenToCheck, configuration, renewTimeBeforeTokenExpiresInSeconds);
        if (idTokenExpired) {
            this.publicEventsService.fireEvent(EventTypes.IdTokenExpired, idTokenExpired);
        }
        return idTokenExpired;
    }
    hasAccessTokenExpiredIfExpiryExists(configuration) {
        const { renewTimeBeforeTokenExpiresInSeconds } = configuration;
        const accessTokenExpiresIn = this.storagePersistenceService.read('access_token_expires_at', configuration);
        const accessTokenHasNotExpired = this.tokenValidationService.validateAccessTokenNotExpired(accessTokenExpiresIn, configuration, renewTimeBeforeTokenExpiresInSeconds);
        const hasExpired = !accessTokenHasNotExpired;
        if (hasExpired) {
            this.publicEventsService.fireEvent(EventTypes.TokenExpired, hasExpired);
        }
        return hasExpired;
    }
    isAuthenticated(configuration) {
        if (!configuration) {
            throwError(() => new Error('Please provide a configuration before setting up the module'));
            return false;
        }
        const hasAccessToken = !!this.storagePersistenceService.getAccessToken(configuration);
        const hasIdToken = !!this.storagePersistenceService.getIdToken(configuration);
        return hasAccessToken && hasIdToken;
    }
    decodeURIComponentSafely(token) {
        if (token) {
            return decodeURIComponent(token);
        }
        else {
            return '';
        }
    }
    persistAccessTokenExpirationTime(authResult, configuration) {
        if (authResult?.expires_in) {
            const accessTokenExpiryTime = new Date(new Date().toUTCString()).valueOf() +
                authResult.expires_in * 1000;
            this.storagePersistenceService.write('access_token_expires_at', accessTokenExpiryTime, configuration);
        }
    }
    composeAuthenticatedResult(allConfigs) {
        if (allConfigs.length === 1) {
            const { configId } = allConfigs[0];
            return {
                isAuthenticated: true,
                allConfigsAuthenticated: [
                    { configId: configId ?? '', isAuthenticated: true },
                ],
            };
        }
        return this.checkAllConfigsIfTheyAreAuthenticated(allConfigs);
    }
    composeUnAuthenticatedResult(allConfigs) {
        if (allConfigs.length === 1) {
            const { configId } = allConfigs[0];
            return {
                isAuthenticated: false,
                allConfigsAuthenticated: [
                    { configId: configId ?? '', isAuthenticated: false },
                ],
            };
        }
        return this.checkAllConfigsIfTheyAreAuthenticated(allConfigs);
    }
    checkAllConfigsIfTheyAreAuthenticated(allConfigs) {
        const allConfigsAuthenticated = allConfigs.map((config) => ({
            configId: config.configId ?? '',
            isAuthenticated: this.isAuthenticated(config),
        }));
        const isAuthenticated = allConfigsAuthenticated.every((x) => !!x.isAuthenticated);
        return { allConfigsAuthenticated, isAuthenticated };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: AuthStateService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: AuthStateService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: AuthStateService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,