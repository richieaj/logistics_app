import { Observable } from 'rxjs';
import { OpenIdConfiguration } from '../config/openid-configuration';
import { CallbackContext } from '../flows/callback-context';
import * as i0 from "@angular/core";
export declare class SilentRenewService {
    private readonly refreshSessionWithIFrameCompletedInternal$;
    get refreshSessionWithIFrameCompleted$(): Observable<CallbackContext | null>;
    private readonly loggerService;
    private readonly iFrameService;
    private readonly flowsService;
    private readonly resetAuthDataService;
    private readonly flowsDataService;
    private readonly authStateService;
    private readonly flowHelper;
    private readonly implicitFlowCallbackService;
    private readonly intervalService;
    getOrCreateIframe(config: OpenIdConfiguration): HTMLIFrameElement;
    isSilentRenewConfigured(configuration: OpenIdConfiguration): boolean;
    codeFlowCallbackSilentRenewIframe(urlParts: string[], config: OpenIdConfiguration, allConfigs: OpenIdConfiguration[]): Observable<CallbackContext>;
    silentRenewEventHandler(e: CustomEvent, config: OpenIdConfiguration, allConfigs: OpenIdConfiguration[]): void;
    private getExistingIframe;
    static ɵfac: i0.ɵɵFactoryDeclaration<SilentRenewService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<SilentRenewService>;
}
