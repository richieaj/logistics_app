import { Observable } from 'rxjs';
import { OpenIdConfiguration } from '../config/openid-configuration';
import * as i0 from "@angular/core";
export declare class TokenValidationService {
    static refreshTokenNoncePlaceholder: string;
    keyAlgorithms: string[];
    private readonly tokenHelperService;
    private readonly loggerService;
    private readonly jwkExtractor;
    private readonly jwkWindowCryptoService;
    private readonly jwtWindowCryptoService;
    hasIdTokenExpired(token: string, configuration: OpenIdConfiguration, offsetSeconds?: number): boolean;
    validateIdTokenExpNotExpired(decodedIdToken: string, configuration: OpenIdConfiguration, offsetSeconds?: number): boolean;
    validateAccessTokenNotExpired(accessTokenExpiresAt: Date, configuration: OpenIdConfiguration, offsetSeconds?: number): boolean;
    validateRequiredIdToken(dataIdToken: any, configuration: OpenIdConfiguration): boolean;
    validateIdTokenIatMaxOffset(dataIdToken: any, maxOffsetAllowedInSeconds: number, disableIatOffsetValidation: boolean, configuration: OpenIdConfiguration): boolean;
    validateIdTokenNonce(dataIdToken: any, localNonce: any, ignoreNonceAfterRefresh: boolean, configuration: OpenIdConfiguration): boolean;
    validateIdTokenIss(dataIdToken: any, authWellKnownEndpointsIssuer: any, configuration: OpenIdConfiguration): boolean;
    validateIdTokenAud(dataIdToken: any, aud: string | undefined, configuration: OpenIdConfiguration): boolean;
    validateIdTokenAzpExistsIfMoreThanOneAud(dataIdToken: any): boolean;
    validateIdTokenAzpValid(dataIdToken: any, clientId: string | undefined): boolean;
    validateStateFromHashCallback(state: any, localState: any, configuration: OpenIdConfiguration): boolean;
    validateSignatureIdToken(idToken: string, jwtkeys: any, configuration: OpenIdConfiguration): Observable<boolean>;
    validateIdTokenAtHash(accessToken: string, atHash: string, idTokenAlg: string, configuration: OpenIdConfiguration): Observable<boolean>;
    private millisToMinutesAndSeconds;
    private calculateNowWithOffset;
    static ɵfac: i0.ɵɵFactoryDeclaration<TokenValidationService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<TokenValidationService>;
}
