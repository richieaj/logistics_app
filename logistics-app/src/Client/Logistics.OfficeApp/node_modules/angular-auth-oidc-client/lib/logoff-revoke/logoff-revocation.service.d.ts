import { Observable } from 'rxjs';
import { LogoutAuthOptions } from '../auth-options';
import { OpenIdConfiguration } from '../config/openid-configuration';
import * as i0 from "@angular/core";
export declare class LogoffRevocationService {
    private readonly loggerService;
    private readonly dataService;
    private readonly storagePersistenceService;
    private readonly urlService;
    private readonly checkSessionService;
    private readonly resetAuthDataService;
    private readonly redirectService;
    logoff(config: OpenIdConfiguration | null, allConfigs: OpenIdConfiguration[], logoutAuthOptions?: LogoutAuthOptions): Observable<unknown>;
    logoffLocal(config: OpenIdConfiguration | null, allConfigs: OpenIdConfiguration[]): void;
    logoffLocalMultiple(allConfigs: OpenIdConfiguration[]): void;
    logoffAndRevokeTokens(config: OpenIdConfiguration | null, allConfigs: OpenIdConfiguration[], logoutAuthOptions?: LogoutAuthOptions): Observable<any>;
    revokeAccessToken(configuration: OpenIdConfiguration | null, accessToken?: any): Observable<any>;
    revokeRefreshToken(configuration: OpenIdConfiguration | null, refreshToken?: any): Observable<any>;
    private logoffInternal;
    private sendRevokeRequest;
    private getHeaders;
    static ɵfac: i0.ɵɵFactoryDeclaration<LogoffRevocationService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<LogoffRevocationService>;
}
