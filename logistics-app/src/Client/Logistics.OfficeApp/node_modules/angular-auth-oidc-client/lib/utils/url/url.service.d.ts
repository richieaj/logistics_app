import { Observable } from 'rxjs';
import { AuthOptions } from '../../auth-options';
import { OpenIdConfiguration } from '../../config/openid-configuration';
import * as i0 from "@angular/core";
export declare class UrlService {
    private readonly loggerService;
    private readonly flowsDataService;
    private readonly flowHelper;
    private readonly storagePersistenceService;
    private readonly jwtWindowCryptoService;
    getUrlParameter(urlToCheck: string, name: string): string;
    isCallbackFromSts(currentUrl: string): boolean;
    getRefreshSessionSilentRenewUrl(config: OpenIdConfiguration, customParams?: {
        [key: string]: string | number | boolean;
    }): Observable<string | null>;
    getAuthorizeParUrl(requestUri: string, configuration: OpenIdConfiguration): string | null;
    getAuthorizeUrl(config: OpenIdConfiguration | null, authOptions?: AuthOptions): Observable<string | null>;
    getEndSessionEndpoint(configuration: OpenIdConfiguration): {
        url: string;
        existingParams: string;
    };
    getEndSessionUrl(configuration: OpenIdConfiguration | null, customParams?: {
        [p: string]: string | number | boolean;
    }): string | null;
    createRevocationEndpointBodyAccessToken(token: string, configuration: OpenIdConfiguration): string | null;
    createRevocationEndpointBodyRefreshToken(token: string, configuration: OpenIdConfiguration): string | null;
    getRevocationEndpointUrl(configuration: OpenIdConfiguration): string | null;
    createBodyForCodeFlowCodeRequest(code: string, configuration: OpenIdConfiguration, customTokenParams?: {
        [p: string]: string | number | boolean;
    }): string | null;
    createBodyForCodeFlowRefreshTokensRequest(refreshToken: string, configuration: OpenIdConfiguration, customParamsRefresh?: {
        [key: string]: string | number | boolean;
    }): string | null;
    createBodyForParCodeFlowRequest(configuration: OpenIdConfiguration, authOptions?: AuthOptions): Observable<string | null>;
    getPostLogoutRedirectUrl(configuration: OpenIdConfiguration): string | null;
    private createEndSessionUrl;
    private createAuthorizeUrl;
    private createUrlImplicitFlowWithSilentRenew;
    private createUrlCodeFlowWithSilentRenew;
    private createUrlImplicitFlowAuthorize;
    private createUrlCodeFlowAuthorize;
    private getCodeChallenge;
    private getRedirectUrl;
    private getSilentRenewUrl;
    private getClientId;
    private appendCustomParams;
    private overWriteParam;
    private createHttpParams;
    private isAuth0Endpoint;
    private composeAuth0Endpoint;
    static ɵfac: i0.ɵɵFactoryDeclaration<UrlService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<UrlService>;
}
